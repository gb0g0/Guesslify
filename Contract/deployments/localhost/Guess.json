{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "leastEthToSend",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "randomNumberRange",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numberOfTrials",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Guess_GameGotNoMoney",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Guess_GameStartedAlready",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Guess__BalanceNotUpToAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Guess__FundYourWalletPlease",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Guess__GameFundFailedSendEnough",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Guess__GameHasStartedYouCannotChecktheLuckyNumber",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Guess__NoBalanceToWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Guess__NotEnoughEthEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Guess__PleaseStartANewGameYouLostTheGameAlready",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Guess__WalletFundFailedSendEnough",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amountOwnerFunded",
          "type": "uint256"
        }
      ],
      "name": "GameFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gamer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amountGamerFunded",
          "type": "uint256"
        }
      ],
      "name": "GamerWalletFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gamer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amountWithdrawn",
          "type": "uint256"
        }
      ],
      "name": "WalletFundsWithdrawn",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DonateToGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allTimeLosers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allTimeWinners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundGameWallet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gamersWalletBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCallCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGameBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGamersWalletBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLuckyNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyGameState",
      "outputs": [
        {
          "internalType": "enum Guess.playerGameState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfTrials",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfTrialsUsed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getstartGameValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "startGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        }
      ],
      "name": "verifyRandomNumber",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawWalletFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1fb9091bf976a8c2decc667eeb1bf40c74c5d7dfe2d9f510895a747b55969447",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1862113",
    "logsBloom": "0x
    "blockHash": "0xaff3395bdae7b72b23f45b65de118bb7cb3e57564f8a03e02c3aa83f3f6baf9f",
    "transactionHash": "0x1fb9091bf976a8c2decc667eeb1bf40c74c5d7dfe2d9f510895a747b55969447",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1862113",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "1",
    "500000",
    "100000000000000000",
    "10",
    "3"
  ],
  "numDeployments": 1,
  "solcInputHash": "39d11075f3256854939887c4c898a175",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"leastEthToSend\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"randomNumberRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfTrials\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Guess_GameGotNoMoney\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Guess_GameStartedAlready\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Guess__BalanceNotUpToAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Guess__FundYourWalletPlease\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Guess__GameFundFailedSendEnough\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Guess__GameHasStartedYouCannotChecktheLuckyNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Guess__NoBalanceToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Guess__NotEnoughEthEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Guess__PleaseStartANewGameYouLostTheGameAlready\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Guess__WalletFundFailedSendEnough\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountOwnerFunded\",\"type\":\"uint256\"}],\"name\":\"GameFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gamer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountGamerFunded\",\"type\":\"uint256\"}],\"name\":\"GamerWalletFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gamer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"}],\"name\":\"WalletFundsWithdrawn\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DonateToGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allTimeLosers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allTimeWinners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundGameWallet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gamersWalletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCallCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGameBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGamersWalletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLuckyNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyGameState\",\"outputs\":[{\"internalType\":\"enum Guess.playerGameState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfTrials\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfTrialsUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getstartGameValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"name\":\"verifyRandomNumber\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawWalletFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Guess.sol\":\"Guess\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Guess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\n\\r\\nerror Guess__NotEnoughEthEntered();\\r\\nerror Guess__NotOwner();\\r\\nerror Guess__FundYourWalletPlease();\\r\\nerror Guess__WalletFundFailedSendEnough();\\r\\nerror Guess__YouLostTheGameAlready();\\r\\nerror Guess__PleaseStartANewGameYouLostTheGameAlready();\\r\\nerror Guess__NoBalanceToWithdraw();\\r\\nerror Guess__GameFundFailedSendEnough();\\r\\nerror Guess_GameGotNoMoney();\\r\\nerror Guess_GameStartedAlready();\\r\\nerror Guess__GameHasStartedYouCannotChecktheLuckyNumber();\\r\\nerror Guess__BalanceNotUpToAmount();\\r\\n\\r\\ncontract Guess is VRFConsumerBaseV2 {\\r\\n    /* Type declarations */\\r\\n    enum playerGameState {\\r\\n        GAMEENDED,\\r\\n        GAMESTARTED\\r\\n    }\\r\\n\\r\\n    /* state variables */\\r\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordintor;\\r\\n    bytes32 private immutable i_gasLane;\\r\\n    uint64 private immutable i_subscriptionId;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n    uint16 private REQUEST_CONFIRMATIONS = 3;\\r\\n    uint32 private NUMWORDS = 1;\\r\\n    address private owner;\\r\\n\\r\\n    /* Game variables */\\r\\n    uint256 private immutable i_leastEthToSend;\\r\\n    uint256 private immutable i_randomNumberRange;\\r\\n    // uint256 private i_luckyNumber;\\r\\n    uint256 private i_numberOfTrials;\\r\\n    uint256 private gameBalance;\\r\\n    // uint256 public i_luckyNumber;\\r\\n    // address payable[] private gamers;\\r\\n\\r\\n    /* Events */\\r\\n    event RequestRaffleWinner(uint256 indexed requestId);\\r\\n    event GameFunded(address indexed owner, uint256 indexed amountOwnerFunded);\\r\\n    event GamerWalletFunded(\\r\\n        address indexed gamer,\\r\\n        uint256 indexed amountGamerFunded\\r\\n    );\\r\\n    event WalletFundsWithdrawn(\\r\\n        address indexed gamer,\\r\\n        uint256 indexed amountWithdrawn\\r\\n    );\\r\\n\\r\\n    /* Mapping */\\r\\n    mapping(address => uint256) public gamersWalletBalance;\\r\\n    // mapping(address => uint256) public gameBalance;\\r\\n    mapping(address => uint256) private callCount;\\r\\n    mapping(address => uint256) private startGameValue;\\r\\n    mapping(address => uint256) private i_luckyNumber;\\r\\n    mapping(uint256 => address) private requestIdToAddress;\\r\\n    mapping(address => playerGameState) private gameState;\\r\\n    mapping(address => uint256) private numberofTrialsUsed;\\r\\n\\r\\n    /* Array */\\r\\n    address[] public allTimeWinners;\\r\\n    address[] public allTimeLosers;\\r\\n\\r\\n    constructor(\\r\\n        address vrfCoordinatorV2,\\r\\n        bytes32 gasLane,\\r\\n        uint64 subscriptionId,\\r\\n        uint32 callbackGasLimit,\\r\\n        uint64 leastEthToSend,\\r\\n        uint256 randomNumberRange,\\r\\n        uint256 numberOfTrials\\r\\n    ) payable VRFConsumerBaseV2(vrfCoordinatorV2) {\\r\\n        if (msg.value <= 0) {\\r\\n            revert Guess__GameFundFailedSendEnough();\\r\\n        }\\r\\n        i_vrfCoordintor = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n        i_gasLane = gasLane;\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n        i_leastEthToSend = leastEthToSend;\\r\\n        owner = msg.sender;\\r\\n        i_randomNumberRange = randomNumberRange;\\r\\n        i_numberOfTrials = numberOfTrials;\\r\\n        gameBalance += msg.value;\\r\\n        // numberofTrialsUsed[address(0x0)] = numberOfTrials;\\r\\n    }\\r\\n\\r\\n    function DonateToGame() public payable {\\r\\n        gameBalance += msg.value;\\r\\n        emit GameFunded(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    function fundGameWallet() public payable {\\r\\n        if (msg.value <= 0) {\\r\\n            revert Guess__WalletFundFailedSendEnough();\\r\\n        }\\r\\n        gamersWalletBalance[msg.sender] += msg.value;\\r\\n\\r\\n        emit GamerWalletFunded(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    function withdrawWalletFunds(uint256 amount) public {\\r\\n        if (gamersWalletBalance[msg.sender] <= 0) {\\r\\n            revert Guess__NoBalanceToWithdraw();\\r\\n        }\\r\\n        if(amount > gamersWalletBalance[msg.sender]){\\r\\n            revert Guess__BalanceNotUpToAmount();\\r\\n        }\\r\\n        uint256 amountToWithdraw = gamersWalletBalance[msg.sender];\\r\\n        gamersWalletBalance[msg.sender] = 0;\\r\\n        payable(msg.sender).transfer(amountToWithdraw);\\r\\n\\r\\n        emit WalletFundsWithdrawn(msg.sender, amountToWithdraw);\\r\\n    }\\r\\n\\r\\n    function startGame(bytes calldata /* performData */) external payable {\\r\\n        if (msg.value < i_leastEthToSend) {\\r\\n            revert Guess__NotEnoughEthEntered();\\r\\n        }\\r\\n        if (msg.value > gamersWalletBalance[msg.sender]) {\\r\\n            revert Guess__FundYourWalletPlease();\\r\\n        }\\r\\n        if (gameBalance == 0 || gameBalance < msg.value * 2) {\\r\\n            revert Guess_GameGotNoMoney();\\r\\n        }\\r\\n        if (gameState[msg.sender] == playerGameState.GAMESTARTED) {\\r\\n            revert Guess_GameStartedAlready();\\r\\n        }\\r\\n        numberofTrialsUsed[msg.sender] = i_numberOfTrials;\\r\\n        gameState[msg.sender] = playerGameState.GAMESTARTED;\\r\\n        gamersWalletBalance[msg.sender] -= msg.value;\\r\\n        gameBalance += msg.value;\\r\\n        startGameValue[msg.sender] += msg.value;\\r\\n\\r\\n        uint256 requestId = i_vrfCoordintor.requestRandomWords(\\r\\n            i_gasLane,\\r\\n            i_subscriptionId,\\r\\n            REQUEST_CONFIRMATIONS,\\r\\n            i_callbackGasLimit,\\r\\n            NUMWORDS\\r\\n        );\\r\\n        requestIdToAddress[requestId] = msg.sender;\\r\\n        emit RequestRaffleWinner(requestId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256 requestId,\\r\\n        uint256[] memory randomWords\\r\\n    ) internal virtual override {\\r\\n        address requester = requestIdToAddress[requestId];\\r\\n        uint256 luckyNumber = randomWords[0] % i_randomNumberRange;\\r\\n        i_luckyNumber[requester] = luckyNumber + 1;\\r\\n    }\\r\\n\\r\\n    function verifyRandomNumber(uint256 randomNumber) public returns (bool) {\\r\\n        if (gameState[msg.sender] == playerGameState.GAMEENDED) {\\r\\n            revert Guess__PleaseStartANewGameYouLostTheGameAlready();\\r\\n        } else {\\r\\n            callCount[msg.sender]++;\\r\\n            numberofTrialsUsed[msg.sender]--;\\r\\n            bool isCorrect = (randomNumber == i_luckyNumber[msg.sender]);\\r\\n            if (isCorrect) {\\r\\n                gameState[msg.sender] = playerGameState.GAMEENDED;\\r\\n                uint256 value = startGameValue[msg.sender];\\r\\n                startGameValue[msg.sender] = 0;\\r\\n                callCount[msg.sender] = 0;\\r\\n                allTimeWinners.push(msg.sender);\\r\\n                gamersWalletBalance[msg.sender] += (value * 2);\\r\\n                gameBalance -= (value * 2);\\r\\n                \\r\\n            } else if (!isCorrect) {\\r\\n                if (callCount[msg.sender] == i_numberOfTrials) {\\r\\n                    gameState[msg.sender] = playerGameState.GAMEENDED;\\r\\n                    uint256 value = startGameValue[msg.sender];\\r\\n                    startGameValue[msg.sender] = 0;\\r\\n                    callCount[msg.sender] = 0;\\r\\n                    allTimeLosers.push(msg.sender);\\r\\n                    gamersWalletBalance[msg.sender] += ((value) / 2);\\r\\n                    gameBalance -= ((value) / 2);\\r\\n                }\\r\\n            }\\r\\n            return isCorrect;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // this functions get called if\\r\\n    // someone sends money to this contract outside it!!!\\r\\n    receive() external payable {\\r\\n        DonateToGame();\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        DonateToGame();\\r\\n    }\\r\\n\\r\\n    // view/pure functions\\r\\n\\r\\n    function getOwner() public view returns (address) {\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    function getGamersWalletBalance() public view returns (uint256) {\\r\\n        return gamersWalletBalance[msg.sender];\\r\\n    }\\r\\n\\r\\n    function getLuckyNumber() public view returns (uint256) {\\r\\n        if(gameState[msg.sender] == playerGameState.GAMESTARTED){\\r\\n            revert Guess__GameHasStartedYouCannotChecktheLuckyNumber();\\r\\n        }\\r\\n        return i_luckyNumber[msg.sender];\\r\\n    }\\r\\n\\r\\n    function getGameBalance() public view returns (uint256) {\\r\\n        return gameBalance;\\r\\n    }\\r\\n\\r\\n    function getNumberOfTrials() public view returns (uint256) {\\r\\n        return i_numberOfTrials;\\r\\n    }\\r\\n\\r\\n    function getCallCount() public view returns (uint256) {\\r\\n        return callCount[msg.sender];\\r\\n    }\\r\\n\\r\\n    function getMyGameState() public view returns (playerGameState) {\\r\\n        return gameState[msg.sender];\\r\\n    }\\r\\n\\r\\n    function getNumberOfTrialsUsed() public view returns (uint256) {\\r\\n        return numberofTrialsUsed[msg.sender];\\r\\n    }\\r\\n    function getstartGameValue() public view returns(uint256){\\r\\n        return startGameValue[msg.sender];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xedea3dffc933a6764c0b1651b96bcf7b2164df15b5a8ae3d8af521342d331e57\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61016060405260036000806101000a81548161ffff021916908361ffff1602179055506001600060026101000a81548163ffffffff021916908363ffffffff1602179055506040516200240438038062002404833981810160405281019062000069919062000339565b868073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505060003411620000da576040517f0f87291600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508560c081815250508467ffffffffffffffff1660e08167ffffffffffffffff16815250508363ffffffff166101008163ffffffff16815250508267ffffffffffffffff16610120818152505033600060066101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816101408181525050806001819055503460026000828254620001bf91906200041b565b925050819055505050505050505062000456565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200020582620001d8565b9050919050565b6200021781620001f8565b81146200022357600080fd5b50565b60008151905062000237816200020c565b92915050565b6000819050919050565b62000252816200023d565b81146200025e57600080fd5b50565b600081519050620002728162000247565b92915050565b600067ffffffffffffffff82169050919050565b620002978162000278565b8114620002a357600080fd5b50565b600081519050620002b7816200028c565b92915050565b600063ffffffff82169050919050565b620002d881620002bd565b8114620002e457600080fd5b50565b600081519050620002f881620002cd565b92915050565b6000819050919050565b6200031381620002fe565b81146200031f57600080fd5b50565b600081519050620003338162000308565b92915050565b600080600080600080600060e0888a0312156200035b576200035a620001d3565b5b60006200036b8a828b0162000226565b97505060206200037e8a828b0162000261565b9650506040620003918a828b01620002a6565b9550506060620003a48a828b01620002e7565b9450506080620003b78a828b01620002a6565b93505060a0620003ca8a828b0162000322565b92505060c0620003dd8a828b0162000322565b91505092959891949750929550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200042882620002fe565b91506200043583620002fe565b925082820190508082111562000450576200044f620003ec565b5b92915050565b60805160a05160c05160e051610100516101205161014051611f4c620004b860003960006116be01526000610f85015260006113580152600061132801526000611307015260006112cb0152600081816104d401526105280152611f4c6000f3fe60806040526004361061010d5760003560e01c8063aa488d7e11610095578063dc2ac12911610064578063dc2ac12914610366578063e69f19cd14610382578063e899466f146103ad578063f2d8dda3146103b7578063fc90eaac146103f45761011c565b8063aa488d7e146102aa578063b96c303b146102e7578063ba5cf4b614610310578063c574d1561461033b5761011c565b806324662e25116100dc57806324662e25146101c15780637b9dda51146101ec578063893d20e814610217578063902e6dab14610242578063a96b2dc01461027f5761011c565b80630fe5155b146101265780631cd9ad9b146101515780631fe543e31461015b57806322112ede146101845761011c565b3661011c5761011a61041f565b005b61012461041f565b005b34801561013257600080fd5b5061013b61047e565b60405161014891906117d2565b60405180910390f35b61015961041f565b005b34801561016757600080fd5b50610182600480360381019061017d9190611990565b6104d2565b005b34801561019057600080fd5b506101ab60048036038101906101a691906119ec565b610592565b6040516101b89190611a5a565b60405180910390f35b3480156101cd57600080fd5b506101d66105d1565b6040516101e39190611a84565b60405180910390f35b3480156101f857600080fd5b50610201610618565b60405161020e9190611a84565b60405180910390f35b34801561022357600080fd5b5061022c61065f565b6040516102399190611a5a565b60405180910390f35b34801561024e57600080fd5b5061026960048036038101906102649190611acb565b610688565b6040516102769190611a84565b60405180910390f35b34801561028b57600080fd5b506102946106a0565b6040516102a19190611a84565b60405180910390f35b3480156102b657600080fd5b506102d160048036038101906102cc91906119ec565b6106e7565b6040516102de9190611b13565b60405180910390f35b3480156102f357600080fd5b5061030e600480360381019061030991906119ec565b610d28565b005b34801561031c57600080fd5b50610325610f32565b6040516103329190611a84565b60405180910390f35b34801561034757600080fd5b50610350610f79565b60405161035d9190611a84565b60405180910390f35b610380600480360381019061037b9190611b89565b610f83565b005b34801561038e57600080fd5b50610397611473565b6040516103a49190611a84565b60405180910390f35b6103b5611563565b005b3480156103c357600080fd5b506103de60048036038101906103d991906119ec565b611639565b6040516103eb9190611a5a565b60405180910390f35b34801561040057600080fd5b50610409611678565b6040516104169190611a84565b60405180910390f35b34600260008282546104319190611c05565b92505081905550343373ffffffffffffffffffffffffffffffffffffffff167f5c963fd7fde519af29d56159e6e3e18db4e5d3e4716c39c87958cf9e4862ed5860405160405180910390a3565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461058457337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161057b929190611c39565b60405180910390fd5b61058e8282611682565b5050565b600b81815481106105a257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60008060069054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60036020528060005260406000206000915090505481565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60008060018111156106fc576106fb61175b565b5b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16600181111561075b5761075a61175b565b5b03610792576040517f509360dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906107e290611c62565b9190505550600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061083790611caa565b91905055506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831490508015610aae576000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360018111156108eb576108ea61175b565b5b02179055506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600a339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600281610a2e9190611cd3565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a7c9190611c05565b92505081905550600281610a909190611cd3565b60026000828254610aa19190611d15565b9250508190555050610d1f565b80610d1e57600154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403610d1d576000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690836001811115610b5e57610b5d61175b565b5b02179055506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600281610ca19190611d78565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610cef9190611c05565b92505081905550600281610d039190611d78565b60026000828254610d149190611d15565b92505081905550505b5b5b80915050919050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610da1576040517f644d533400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115610e1a576040517fedd65a2b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610ee9573d6000803e3d6000fd5b50803373ffffffffffffffffffffffffffffffffffffffff167fd8983cf18affd47d2b124228c0ed45ba546e64e3df3ba503ae24917cc9fa80f360405160405180910390a35050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000600254905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610fdd576040517f7336562800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054341115611056576040517fe79d7a4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002541480611074575060023461106f9190611cd3565b600254105b156110ab576040517f321aa5b000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001808111156110be576110bd61175b565b5b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16600181111561111d5761111c61175b565b5b03611154576040517f2ab870bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600154600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360018111156111fd576111fc61175b565b5b021790555034600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112519190611d15565b92505081905550346002600082825461126a9190611c05565b9250508190555034600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112c09190611c05565b9250508190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060008054906101000a900461ffff167f0000000000000000000000000000000000000000000000000000000000000000600060029054906101000a900463ffffffff166040518663ffffffff1660e01b81526004016113aa959493929190611e21565b6020604051808303816000875af11580156113c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ed9190611e89565b9050336007600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fde6349b018d6c03d837b67d9a198a6ba4842546f2295fe963fae141e5dbaef8160405160405180910390a2505050565b60006001808111156114885761148761175b565b5b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660018111156114e7576114e661175b565b5b0361151e576040517fbd4c46c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000341161159d576040517fbf6fa0fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115ec9190611c05565b92505081905550343373ffffffffffffffffffffffffffffffffffffffff167f2cde8fb4822495d9efe0e5fa111675f127ce41e30c80620d46cc1a606ab0384760405160405180910390a3565b600a818154811061164957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600154905090565b60006007600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060007f0000000000000000000000000000000000000000000000000000000000000000836000815181106116f1576116f0611eb6565b5b60200260200101516117039190611ee5565b90506001816117129190611c05565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811061179b5761179a61175b565b5b50565b60008190506117ac8261178a565b919050565b60006117bc8261179e565b9050919050565b6117cc816117b1565b82525050565b60006020820190506117e760008301846117c3565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61181481611801565b811461181f57600080fd5b50565b6000813590506118318161180b565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6118858261183c565b810181811067ffffffffffffffff821117156118a4576118a361184d565b5b80604052505050565b60006118b76117ed565b90506118c3828261187c565b919050565b600067ffffffffffffffff8211156118e3576118e261184d565b5b602082029050602081019050919050565b600080fd5b600061190c611907846118c8565b6118ad565b9050808382526020820190506020840283018581111561192f5761192e6118f4565b5b835b8181101561195857806119448882611822565b845260208401935050602081019050611931565b5050509392505050565b600082601f83011261197757611976611837565b5b81356119878482602086016118f9565b91505092915050565b600080604083850312156119a7576119a66117f7565b5b60006119b585828601611822565b925050602083013567ffffffffffffffff8111156119d6576119d56117fc565b5b6119e285828601611962565b9150509250929050565b600060208284031215611a0257611a016117f7565b5b6000611a1084828501611822565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a4482611a19565b9050919050565b611a5481611a39565b82525050565b6000602082019050611a6f6000830184611a4b565b92915050565b611a7e81611801565b82525050565b6000602082019050611a996000830184611a75565b92915050565b611aa881611a39565b8114611ab357600080fd5b50565b600081359050611ac581611a9f565b92915050565b600060208284031215611ae157611ae06117f7565b5b6000611aef84828501611ab6565b91505092915050565b60008115159050919050565b611b0d81611af8565b82525050565b6000602082019050611b286000830184611b04565b92915050565b600080fd5b60008083601f840112611b4957611b48611837565b5b8235905067ffffffffffffffff811115611b6657611b65611b2e565b5b602083019150836001820283011115611b8257611b816118f4565b5b9250929050565b60008060208385031215611ba057611b9f6117f7565b5b600083013567ffffffffffffffff811115611bbe57611bbd6117fc565b5b611bca85828601611b33565b92509250509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c1082611801565b9150611c1b83611801565b9250828201905080821115611c3357611c32611bd6565b5b92915050565b6000604082019050611c4e6000830185611a4b565b611c5b6020830184611a4b565b9392505050565b6000611c6d82611801565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611c9f57611c9e611bd6565b5b600182019050919050565b6000611cb582611801565b915060008203611cc857611cc7611bd6565b5b600182039050919050565b6000611cde82611801565b9150611ce983611801565b9250828202611cf781611801565b91508282048414831517611d0e57611d0d611bd6565b5b5092915050565b6000611d2082611801565b9150611d2b83611801565b9250828203905081811115611d4357611d42611bd6565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611d8382611801565b9150611d8e83611801565b925082611d9e57611d9d611d49565b5b828204905092915050565b6000819050919050565b611dbc81611da9565b82525050565b600067ffffffffffffffff82169050919050565b611ddf81611dc2565b82525050565b600061ffff82169050919050565b611dfc81611de5565b82525050565b600063ffffffff82169050919050565b611e1b81611e02565b82525050565b600060a082019050611e366000830188611db3565b611e436020830187611dd6565b611e506040830186611df3565b611e5d6060830185611e12565b611e6a6080830184611e12565b9695505050505050565b600081519050611e838161180b565b92915050565b600060208284031215611e9f57611e9e6117f7565b5b6000611ead84828501611e74565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611ef082611801565b9150611efb83611801565b925082611f0b57611f0a611d49565b5b82820690509291505056fea2646970667358221220f1ccacf4bdabe910e39b2971e5eabc65373ba2eb1ded407b5bace12358d6c1ba64736f6c63430008120033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1156,
        "contract": "contracts/Guess.sol:Guess",
        "label": "REQUEST_CONFIRMATIONS",
        "offset": 0,
        "slot": "0",
        "type": "t_uint16"
      },
      {
        "astId": 1159,
        "contract": "contracts/Guess.sol:Guess",
        "label": "NUMWORDS",
        "offset": 2,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 1161,
        "contract": "contracts/Guess.sol:Guess",
        "label": "owner",
        "offset": 6,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1167,
        "contract": "contracts/Guess.sol:Guess",
        "label": "i_numberOfTrials",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1169,
        "contract": "contracts/Guess.sol:Guess",
        "label": "gameBalance",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1195,
        "contract": "contracts/Guess.sol:Guess",
        "label": "gamersWalletBalance",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1199,
        "contract": "contracts/Guess.sol:Guess",
        "label": "callCount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1203,
        "contract": "contracts/Guess.sol:Guess",
        "label": "startGameValue",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1207,
        "contract": "contracts/Guess.sol:Guess",
        "label": "i_luckyNumber",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1211,
        "contract": "contracts/Guess.sol:Guess",
        "label": "requestIdToAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1216,
        "contract": "contracts/Guess.sol:Guess",
        "label": "gameState",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_enum(playerGameState)1144)"
      },
      {
        "astId": 1220,
        "contract": "contracts/Guess.sol:Guess",
        "label": "numberofTrialsUsed",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1223,
        "contract": "contracts/Guess.sol:Guess",
        "label": "allTimeWinners",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1226,
        "contract": "contracts/Guess.sol:Guess",
        "label": "allTimeLosers",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_enum(playerGameState)1144": {
        "encoding": "inplace",
        "label": "enum Guess.playerGameState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_enum(playerGameState)1144)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum Guess.playerGameState)",
        "numberOfBytes": "32",
        "value": "t_enum(playerGameState)1144"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}