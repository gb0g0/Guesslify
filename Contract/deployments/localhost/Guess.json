{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "leastEthToSend",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "randomNumberRange",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numberOfTrials",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Guess_GameGotNoMoney",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Guess_GameStartedAlready",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Guess__BalanceNotUpToAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Guess__FundYourWalletPlease",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Guess__GameFundFailedSendEnough",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Guess__GameHasStartedYouCannotChecktheLuckyNumber",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Guess__NoBalanceToWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Guess__NotEnoughEthEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Guess__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Guess__PleaseStartANewGameYouLostTheGameAlready",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Guess__ThereIsAnActivePlayerYouCannotWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Guess__WalletFundFailedSendEnough",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amountOwnerFunded",
          "type": "uint256"
        }
      ],
      "name": "GameFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gamer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amountGamerFunded",
          "type": "uint256"
        }
      ],
      "name": "GamerWalletFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gamer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amountWithdrawn",
          "type": "uint256"
        }
      ],
      "name": "WalletFundsWithdrawn",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DonateToGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundGameWallet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gamersWalletBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCallCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGameBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGamersWalletBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLuckyNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyGameState",
      "outputs": [
        {
          "internalType": "enum Guess.playerGameState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfTrials",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfTrialsUsed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getstartGameValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "startGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        }
      ],
      "name": "verifyRandomNumber",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawGameBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawWalletFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbfaa0c72334e62ab5905eaa89e88032c19562098bd81cc7c53e723eac1942da6",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1884394",
    "logsBloom": "0x
    "blockHash": "0x0ae51d6167eb8de8d965dc68ddbbb9ad6b1d52b287054d27939bfc26e192c510",
    "transactionHash": "0xbfaa0c72334e62ab5905eaa89e88032c19562098bd81cc7c53e723eac1942da6",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1884394",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "1",
    "500000",
    "100000000000000000",
    "10",
    "3"
  ],
  "numDeployments": 1,
  "solcInputHash": "74b898e23ff43e7f527904320c99ef57",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"leastEthToSend\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"randomNumberRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfTrials\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Guess_GameGotNoMoney\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Guess_GameStartedAlready\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Guess__BalanceNotUpToAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Guess__FundYourWalletPlease\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Guess__GameFundFailedSendEnough\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Guess__GameHasStartedYouCannotChecktheLuckyNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Guess__NoBalanceToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Guess__NotEnoughEthEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Guess__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Guess__PleaseStartANewGameYouLostTheGameAlready\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Guess__ThereIsAnActivePlayerYouCannotWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Guess__WalletFundFailedSendEnough\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountOwnerFunded\",\"type\":\"uint256\"}],\"name\":\"GameFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gamer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountGamerFunded\",\"type\":\"uint256\"}],\"name\":\"GamerWalletFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gamer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"}],\"name\":\"WalletFundsWithdrawn\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DonateToGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundGameWallet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gamersWalletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCallCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGameBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGamersWalletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLuckyNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyGameState\",\"outputs\":[{\"internalType\":\"enum Guess.playerGameState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfTrials\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfTrialsUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getstartGameValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"name\":\"verifyRandomNumber\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawGameBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawWalletFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Guess.sol\":\"Guess\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Guess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\n\\r\\nerror Guess__NotEnoughEthEntered();\\r\\nerror Guess__NotOwner();\\r\\nerror Guess__FundYourWalletPlease();\\r\\nerror Guess__WalletFundFailedSendEnough();\\r\\nerror Guess__YouLostTheGameAlready();\\r\\nerror Guess__PleaseStartANewGameYouLostTheGameAlready();\\r\\nerror Guess__NoBalanceToWithdraw();\\r\\nerror Guess__GameFundFailedSendEnough();\\r\\nerror Guess_GameGotNoMoney();\\r\\nerror Guess_GameStartedAlready();\\r\\nerror Guess__GameHasStartedYouCannotChecktheLuckyNumber();\\r\\nerror Guess__BalanceNotUpToAmount();\\r\\nerror Guess__ThereIsAnActivePlayerYouCannotWithdraw();\\r\\n\\r\\ncontract Guess is VRFConsumerBaseV2 {\\r\\n    /* Type declarations */\\r\\n    enum playerGameState {\\r\\n        GAMEENDED,\\r\\n        GAMESTARTED\\r\\n    }\\r\\n\\r\\n    /* state variables */\\r\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordintor;\\r\\n    bytes32 private immutable i_gasLane;\\r\\n    uint64 private immutable i_subscriptionId;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n    uint16 private REQUEST_CONFIRMATIONS = 3;\\r\\n    uint32 private NUMWORDS = 1;\\r\\n    address private owner;\\r\\n\\r\\n    /* Game variables */\\r\\n    uint256 private immutable i_leastEthToSend;\\r\\n    uint256 private immutable i_randomNumberRange;\\r\\n    // uint256 private i_luckyNumber;\\r\\n    uint256 private i_numberOfTrials;\\r\\n    uint256 private gameBalance;\\r\\n    // uint256 public i_luckyNumber;\\r\\n    // address payable[] private gamers;\\r\\n\\r\\n    /* Events */\\r\\n    event RequestRaffleWinner(uint256 indexed requestId);\\r\\n    event GameFunded(address indexed owner, uint256 indexed amountOwnerFunded);\\r\\n    event GamerWalletFunded(\\r\\n        address indexed gamer,\\r\\n        uint256 indexed amountGamerFunded\\r\\n    );\\r\\n    event WalletFundsWithdrawn(\\r\\n        address indexed gamer,\\r\\n        uint256 indexed amountWithdrawn\\r\\n    );\\r\\n\\r\\n    /* Mapping */\\r\\n    mapping(address => uint256) public gamersWalletBalance;\\r\\n    // mapping(address => uint256) public gameBalance;\\r\\n    mapping(address => uint256) private callCount;\\r\\n    mapping(address => uint256) private startGameValue;\\r\\n    mapping(address => uint256) private i_luckyNumber;\\r\\n    mapping(uint256 => address) private requestIdToAddress;\\r\\n    mapping(address => playerGameState) private gameState;\\r\\n    mapping(address => uint256) private numberofTrialsUsed;\\r\\n\\r\\n    /* Array */\\r\\n    address[] private activeGamers;\\r\\n\\r\\n    // address[] public allTimeWinners;\\r\\n    // address[] public allTimeLosers;\\r\\n\\r\\n    constructor(\\r\\n        address vrfCoordinatorV2,\\r\\n        bytes32 gasLane,\\r\\n        uint64 subscriptionId,\\r\\n        uint32 callbackGasLimit,\\r\\n        uint64 leastEthToSend,\\r\\n        uint256 randomNumberRange,\\r\\n        uint256 numberOfTrials\\r\\n    ) payable VRFConsumerBaseV2(vrfCoordinatorV2) {\\r\\n        if (msg.value <= 0) {\\r\\n            revert Guess__GameFundFailedSendEnough();\\r\\n        }\\r\\n        i_vrfCoordintor = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n        i_gasLane = gasLane;\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n        i_leastEthToSend = leastEthToSend;\\r\\n        owner = msg.sender;\\r\\n        i_randomNumberRange = randomNumberRange;\\r\\n        i_numberOfTrials = numberOfTrials;\\r\\n        gameBalance += msg.value;\\r\\n        // numberofTrialsUsed[address(0x0)] = numberOfTrials;\\r\\n    }\\r\\n\\r\\n    function DonateToGame() public payable {\\r\\n        gameBalance += msg.value;\\r\\n        emit GameFunded(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    function withdrawGameBalance() public {\\r\\n        if (msg.sender != owner) {\\r\\n            revert Guess__NotOwner();\\r\\n        }\\r\\n        if (activeGamers.length > 0) {\\r\\n            revert Guess__ThereIsAnActivePlayerYouCannotWithdraw();\\r\\n        }\\r\\n        payable(msg.sender).transfer(gameBalance);\\r\\n    }\\r\\n\\r\\n    function fundGameWallet() public payable {\\r\\n        if (msg.value <= 0) {\\r\\n            revert Guess__WalletFundFailedSendEnough();\\r\\n        }\\r\\n        gamersWalletBalance[msg.sender] += msg.value;\\r\\n\\r\\n        emit GamerWalletFunded(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    function withdrawWalletFunds(uint256 amount) public {\\r\\n        if (gamersWalletBalance[msg.sender] <= 0) {\\r\\n            revert Guess__NoBalanceToWithdraw();\\r\\n        }\\r\\n        if (amount > gamersWalletBalance[msg.sender]) {\\r\\n            revert Guess__BalanceNotUpToAmount();\\r\\n        }\\r\\n        // uint256 amountToWithdraw = gamersWalletBalance[msg.sender];\\r\\n        gamersWalletBalance[msg.sender] -= amount;\\r\\n        payable(msg.sender).transfer(amount);\\r\\n\\r\\n        emit WalletFundsWithdrawn(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function startGame(bytes calldata /* performData */) external payable {\\r\\n        if (msg.value < i_leastEthToSend) {\\r\\n            revert Guess__NotEnoughEthEntered();\\r\\n        }\\r\\n        if (msg.value > gamersWalletBalance[msg.sender]) {\\r\\n            revert Guess__FundYourWalletPlease();\\r\\n        }\\r\\n        if (gameBalance == 0 || gameBalance < msg.value * 2) {\\r\\n            revert Guess_GameGotNoMoney();\\r\\n        }\\r\\n        if (gameState[msg.sender] == playerGameState.GAMESTARTED) {\\r\\n            revert Guess_GameStartedAlready();\\r\\n        }\\r\\n        activeGamers.push(msg.sender);\\r\\n        numberofTrialsUsed[msg.sender] = i_numberOfTrials;\\r\\n        gameState[msg.sender] = playerGameState.GAMESTARTED;\\r\\n        gamersWalletBalance[msg.sender] -= msg.value;\\r\\n        gameBalance += msg.value;\\r\\n        startGameValue[msg.sender] += msg.value;\\r\\n\\r\\n        uint256 requestId = i_vrfCoordintor.requestRandomWords(\\r\\n            i_gasLane,\\r\\n            i_subscriptionId,\\r\\n            REQUEST_CONFIRMATIONS,\\r\\n            i_callbackGasLimit,\\r\\n            NUMWORDS\\r\\n        );\\r\\n        requestIdToAddress[requestId] = msg.sender;\\r\\n        emit RequestRaffleWinner(requestId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256 requestId,\\r\\n        uint256[] memory randomWords\\r\\n    ) internal virtual override {\\r\\n        address requester = requestIdToAddress[requestId];\\r\\n        uint256 luckyNumber = randomWords[0] % i_randomNumberRange;\\r\\n        i_luckyNumber[requester] = luckyNumber + 1;\\r\\n    }\\r\\n\\r\\n    function verifyRandomNumber(uint256 randomNumber) public returns (bool) {\\r\\n        if (gameState[msg.sender] == playerGameState.GAMEENDED) {\\r\\n            revert Guess__PleaseStartANewGameYouLostTheGameAlready();\\r\\n        } else {\\r\\n            callCount[msg.sender]++;\\r\\n            numberofTrialsUsed[msg.sender]--;\\r\\n            bool isCorrect = (randomNumber == i_luckyNumber[msg.sender]);\\r\\n            if (isCorrect) {\\r\\n                gameState[msg.sender] = playerGameState.GAMEENDED;\\r\\n                uint256 value = startGameValue[msg.sender];\\r\\n                startGameValue[msg.sender] = 0;\\r\\n                callCount[msg.sender] = 0;\\r\\n                for (uint i = 0; i < activeGamers.length; i++) {\\r\\n                    if (activeGamers[i] == msg.sender) {\\r\\n                        delete activeGamers[i];\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n                // allTimeWinners.push(msg.sender);\\r\\n                gamersWalletBalance[msg.sender] += (value * 2);\\r\\n                gameBalance -= (value * 2);\\r\\n            } else if (!isCorrect) {\\r\\n                if (callCount[msg.sender] == i_numberOfTrials) {\\r\\n                    gameState[msg.sender] = playerGameState.GAMEENDED;\\r\\n                    uint256 value = startGameValue[msg.sender];\\r\\n                    startGameValue[msg.sender] = 0;\\r\\n                    callCount[msg.sender] = 0;\\r\\n                    // allTimeLosers.push(msg.sender);\\r\\n                    gamersWalletBalance[msg.sender] += ((value) / 2);\\r\\n                    gameBalance -= ((value) / 2);\\r\\n                }\\r\\n            }\\r\\n            return isCorrect;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // this functions get called if someone\\r\\n    // sends money to this contract outside of it!!!\\r\\n    receive() external payable {\\r\\n        DonateToGame();\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        DonateToGame();\\r\\n    }\\r\\n\\r\\n    // view/pure functions\\r\\n\\r\\n    function getOwner() public view returns (address) {\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    function getGamersWalletBalance() public view returns (uint256) {\\r\\n        return gamersWalletBalance[msg.sender];\\r\\n    }\\r\\n\\r\\n    function getLuckyNumber() public view returns (uint256) {\\r\\n        if (gameState[msg.sender] == playerGameState.GAMESTARTED) {\\r\\n            revert Guess__GameHasStartedYouCannotChecktheLuckyNumber();\\r\\n        }\\r\\n        return i_luckyNumber[msg.sender];\\r\\n    }\\r\\n\\r\\n    function getGameBalance() public view returns (uint256) {\\r\\n        return gameBalance;\\r\\n    }\\r\\n\\r\\n    function getNumberOfTrials() public view returns (uint256) {\\r\\n        return i_numberOfTrials;\\r\\n    }\\r\\n\\r\\n    function getCallCount() public view returns (uint256) {\\r\\n        return callCount[msg.sender];\\r\\n    }\\r\\n\\r\\n    function getMyGameState() public view returns (playerGameState) {\\r\\n        return gameState[msg.sender];\\r\\n    }\\r\\n\\r\\n    function getNumberOfTrialsUsed() public view returns (uint256) {\\r\\n        return numberofTrialsUsed[msg.sender];\\r\\n    }\\r\\n\\r\\n    function getstartGameValue() public view returns (uint256) {\\r\\n        return startGameValue[msg.sender];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9dad0022f08e898bf00142d5cfb029adc71b6bc9d94101ad4fbebc86f13c6274\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61016060405260036000806101000a81548161ffff021916908361ffff1602179055506001600060026101000a81548163ffffffff021916908363ffffffff1602179055506040516200246e3803806200246e833981810160405281019062000069919062000339565b868073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505060003411620000da576040517f0f87291600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508560c081815250508467ffffffffffffffff1660e08167ffffffffffffffff16815250508363ffffffff166101008163ffffffff16815250508267ffffffffffffffff16610120818152505033600060066101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816101408181525050806001819055503460026000828254620001bf91906200041b565b925050819055505050505050505062000456565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200020582620001d8565b9050919050565b6200021781620001f8565b81146200022357600080fd5b50565b60008151905062000237816200020c565b92915050565b6000819050919050565b62000252816200023d565b81146200025e57600080fd5b50565b600081519050620002728162000247565b92915050565b600067ffffffffffffffff82169050919050565b620002978162000278565b8114620002a357600080fd5b50565b600081519050620002b7816200028c565b92915050565b600063ffffffff82169050919050565b620002d881620002bd565b8114620002e457600080fd5b50565b600081519050620002f881620002cd565b92915050565b6000819050919050565b6200031381620002fe565b81146200031f57600080fd5b50565b600081519050620003338162000308565b92915050565b600080600080600080600060e0888a0312156200035b576200035a620001d3565b5b60006200036b8a828b0162000226565b97505060206200037e8a828b0162000261565b9650506040620003918a828b01620002a6565b9550506060620003a48a828b01620002e7565b9450506080620003b78a828b01620002a6565b93505060a0620003ca8a828b0162000322565b92505060c0620003dd8a828b0162000322565b91505092959891949750929550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200042882620002fe565b91506200043583620002fe565b925082820190508082111562000450576200044f620003ec565b5b92915050565b60805160a05160c05160e051610100516101205161014051611fb6620004b8600039600061172801526000610fcb01526000611401015260006113d1015260006113b00152600061137401526000818161046601526104ba0152611fb66000f3fe6080604052600436106101025760003560e01c8063a96b2dc011610095578063c574d15611610064578063c574d1561461030a578063dc2ac12914610335578063e69f19cd14610351578063e899466f1461037c578063fc90eaac1461038657610111565b8063a96b2dc01461024e578063aa488d7e14610279578063b96c303b146102b6578063ba5cf4b6146102df57610111565b806355cc42b3116100d157806355cc42b3146101a45780637b9dda51146101bb578063893d20e8146101e6578063902e6dab1461021157610111565b80630fe5155b1461011b5780631cd9ad9b146101465780631fe543e31461015057806324662e251461017957610111565b366101115761010f6103b1565b005b6101196103b1565b005b34801561012757600080fd5b50610130610410565b60405161013d919061183c565b60405180910390f35b61014e6103b1565b005b34801561015c57600080fd5b50610177600480360381019061017291906119fa565b610464565b005b34801561018557600080fd5b5061018e610524565b60405161019b9190611a65565b60405180910390f35b3480156101b057600080fd5b506101b961056b565b005b3480156101c757600080fd5b506101d061067d565b6040516101dd9190611a65565b60405180910390f35b3480156101f257600080fd5b506101fb6106c4565b6040516102089190611ac1565b60405180910390f35b34801561021d57600080fd5b5061023860048036038101906102339190611b08565b6106ed565b6040516102459190611a65565b60405180910390f35b34801561025a57600080fd5b50610263610705565b6040516102709190611a65565b60405180910390f35b34801561028557600080fd5b506102a0600480360381019061029b9190611b35565b61074c565b6040516102ad9190611b7d565b60405180910390f35b3480156102c257600080fd5b506102dd60048036038101906102d89190611b35565b610da2565b005b3480156102eb57600080fd5b506102f4610f78565b6040516103019190611a65565b60405180910390f35b34801561031657600080fd5b5061031f610fbf565b60405161032c9190611a65565b60405180910390f35b61034f600480360381019061034a9190611bf3565b610fc9565b005b34801561035d57600080fd5b5061036661151c565b6040516103739190611a65565b60405180910390f35b61038461160c565b005b34801561039257600080fd5b5061039b6116e2565b6040516103a89190611a65565b60405180910390f35b34600260008282546103c39190611c6f565b92505081905550343373ffffffffffffffffffffffffffffffffffffffff167f5c963fd7fde519af29d56159e6e3e18db4e5d3e4716c39c87958cf9e4862ed5860405160405180910390a3565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461051657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161050d929190611ca3565b60405180910390fd5b61052082826116ec565b5050565b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b600060069054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105f2576040517f7f897af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600a805490501115610632576040517f176ef90700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc6002549081150290604051600060405180830381858888f1935050505015801561067a573d6000803e3d6000fd5b50565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60008060069054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60036020528060005260406000206000915090505481565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000806001811115610761576107606117c5565b5b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660018111156107c0576107bf6117c5565b5b036107f7576040517f509360dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061084790611ccc565b9190505550600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061089c90611d14565b91905055506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831490508015610b8b576000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360018111156109505761094f6117c5565b5b02179055506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060005b600a80549050811015610afd573373ffffffffffffffffffffffffffffffffffffffff16600a8281548110610a5e57610a5d611d3d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610aea57600a8181548110610ab857610ab7611d3d565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055610afd565b8080610af590611ccc565b915050610a26565b50600281610b0b9190611d6c565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b599190611c6f565b92505081905550600281610b6d9190611d6c565b60026000828254610b7e9190611dae565b9250508190555050610d99565b80610d9857600154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403610d97576000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690836001811115610c3b57610c3a6117c5565b5b02179055506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600281610d1b9190611e11565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d699190611c6f565b92505081905550600281610d7d9190611e11565b60026000828254610d8e9190611dae565b92505081905550505b5b5b80915050919050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610e1b576040517f644d533400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115610e94576040517fedd65a2b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ee39190611dae565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610f30573d6000803e3d6000fd5b50803373ffffffffffffffffffffffffffffffffffffffff167fd8983cf18affd47d2b124228c0ed45ba546e64e3df3ba503ae24917cc9fa80f360405160405180910390a350565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000600254905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015611023576040517f7336562800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205434111561109c576040517fe79d7a4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060025414806110ba57506002346110b59190611d6c565b600254105b156110f1576040517f321aa5b000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600180811115611104576111036117c5565b5b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166001811115611163576111626117c5565b5b0361119a576040517f2ab870bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600154600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360018111156112a6576112a56117c5565b5b021790555034600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112fa9190611dae565b9250508190555034600260008282546113139190611c6f565b9250508190555034600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113699190611c6f565b9250508190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060008054906101000a900461ffff167f0000000000000000000000000000000000000000000000000000000000000000600060029054906101000a900463ffffffff166040518663ffffffff1660e01b8152600401611453959493929190611eba565b6020604051808303816000875af1158015611472573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114969190611f22565b9050336007600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fde6349b018d6c03d837b67d9a198a6ba4842546f2295fe963fae141e5dbaef8160405160405180910390a2505050565b6000600180811115611531576115306117c5565b5b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660018111156115905761158f6117c5565b5b036115c7576040517fbd4c46c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60003411611646576040517fbf6fa0fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116959190611c6f565b92505081905550343373ffffffffffffffffffffffffffffffffffffffff167f2cde8fb4822495d9efe0e5fa111675f127ce41e30c80620d46cc1a606ab0384760405160405180910390a3565b6000600154905090565b60006007600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060007f00000000000000000000000000000000000000000000000000000000000000008360008151811061175b5761175a611d3d565b5b602002602001015161176d9190611f4f565b905060018161177c9190611c6f565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110611805576118046117c5565b5b50565b6000819050611816826117f4565b919050565b600061182682611808565b9050919050565b6118368161181b565b82525050565b6000602082019050611851600083018461182d565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61187e8161186b565b811461188957600080fd5b50565b60008135905061189b81611875565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6118ef826118a6565b810181811067ffffffffffffffff8211171561190e5761190d6118b7565b5b80604052505050565b6000611921611857565b905061192d82826118e6565b919050565b600067ffffffffffffffff82111561194d5761194c6118b7565b5b602082029050602081019050919050565b600080fd5b600061197661197184611932565b611917565b905080838252602082019050602084028301858111156119995761199861195e565b5b835b818110156119c257806119ae888261188c565b84526020840193505060208101905061199b565b5050509392505050565b600082601f8301126119e1576119e06118a1565b5b81356119f1848260208601611963565b91505092915050565b60008060408385031215611a1157611a10611861565b5b6000611a1f8582860161188c565b925050602083013567ffffffffffffffff811115611a4057611a3f611866565b5b611a4c858286016119cc565b9150509250929050565b611a5f8161186b565b82525050565b6000602082019050611a7a6000830184611a56565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611aab82611a80565b9050919050565b611abb81611aa0565b82525050565b6000602082019050611ad66000830184611ab2565b92915050565b611ae581611aa0565b8114611af057600080fd5b50565b600081359050611b0281611adc565b92915050565b600060208284031215611b1e57611b1d611861565b5b6000611b2c84828501611af3565b91505092915050565b600060208284031215611b4b57611b4a611861565b5b6000611b598482850161188c565b91505092915050565b60008115159050919050565b611b7781611b62565b82525050565b6000602082019050611b926000830184611b6e565b92915050565b600080fd5b60008083601f840112611bb357611bb26118a1565b5b8235905067ffffffffffffffff811115611bd057611bcf611b98565b5b602083019150836001820283011115611bec57611beb61195e565b5b9250929050565b60008060208385031215611c0a57611c09611861565b5b600083013567ffffffffffffffff811115611c2857611c27611866565b5b611c3485828601611b9d565b92509250509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c7a8261186b565b9150611c858361186b565b9250828201905080821115611c9d57611c9c611c40565b5b92915050565b6000604082019050611cb86000830185611ab2565b611cc56020830184611ab2565b9392505050565b6000611cd78261186b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611d0957611d08611c40565b5b600182019050919050565b6000611d1f8261186b565b915060008203611d3257611d31611c40565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611d778261186b565b9150611d828361186b565b9250828202611d908161186b565b91508282048414831517611da757611da6611c40565b5b5092915050565b6000611db98261186b565b9150611dc48361186b565b9250828203905081811115611ddc57611ddb611c40565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611e1c8261186b565b9150611e278361186b565b925082611e3757611e36611de2565b5b828204905092915050565b6000819050919050565b611e5581611e42565b82525050565b600067ffffffffffffffff82169050919050565b611e7881611e5b565b82525050565b600061ffff82169050919050565b611e9581611e7e565b82525050565b600063ffffffff82169050919050565b611eb481611e9b565b82525050565b600060a082019050611ecf6000830188611e4c565b611edc6020830187611e6f565b611ee96040830186611e8c565b611ef66060830185611eab565b611f036080830184611eab565b9695505050505050565b600081519050611f1c81611875565b92915050565b600060208284031215611f3857611f37611861565b5b6000611f4684828501611f0d565b91505092915050565b6000611f5a8261186b565b9150611f658361186b565b925082611f7557611f74611de2565b5b82820690509291505056fea264697066735822122029d20af66d807118baf946c85c7157238017912e8a287bdc4cc8c40b2e63ef4364736f6c63430008120033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 200,
        "contract": "contracts/Guess.sol:Guess",
        "label": "REQUEST_CONFIRMATIONS",
        "offset": 0,
        "slot": "0",
        "type": "t_uint16"
      },
      {
        "astId": 203,
        "contract": "contracts/Guess.sol:Guess",
        "label": "NUMWORDS",
        "offset": 2,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 205,
        "contract": "contracts/Guess.sol:Guess",
        "label": "owner",
        "offset": 6,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 211,
        "contract": "contracts/Guess.sol:Guess",
        "label": "i_numberOfTrials",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 213,
        "contract": "contracts/Guess.sol:Guess",
        "label": "gameBalance",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 239,
        "contract": "contracts/Guess.sol:Guess",
        "label": "gamersWalletBalance",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 243,
        "contract": "contracts/Guess.sol:Guess",
        "label": "callCount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 247,
        "contract": "contracts/Guess.sol:Guess",
        "label": "startGameValue",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 251,
        "contract": "contracts/Guess.sol:Guess",
        "label": "i_luckyNumber",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 255,
        "contract": "contracts/Guess.sol:Guess",
        "label": "requestIdToAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 260,
        "contract": "contracts/Guess.sol:Guess",
        "label": "gameState",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_enum(playerGameState)188)"
      },
      {
        "astId": 264,
        "contract": "contracts/Guess.sol:Guess",
        "label": "numberofTrialsUsed",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 267,
        "contract": "contracts/Guess.sol:Guess",
        "label": "activeGamers",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_enum(playerGameState)188": {
        "encoding": "inplace",
        "label": "enum Guess.playerGameState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_enum(playerGameState)188)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum Guess.playerGameState)",
        "numberOfBytes": "32",
        "value": "t_enum(playerGameState)188"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}